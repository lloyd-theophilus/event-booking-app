apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.deployment.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Values.app.name }}
spec:
  replicas: {{ .Values.deployment.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.app.name }}
  strategy:  # Moved up from spec.template.spec.strategy
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ .Values.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.rollingUpdate.maxUnavailable }}
  template:
    metadata:
      labels:
        app: {{ .Values.app.name }}
    spec:
      containers:
      - name: {{ .Values.app.name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        ports:
        - containerPort: {{ .Values.service.targetPort }}
        resources:
          {{ toYaml .Values.resources | nindent 10 }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: DATABASE_HOST
          value: "{{ .Values.env.DATABASE_HOST }}"
        - name: DATABASE_PORT
          value: "{{ .Values.env.DATABASE_PORT }}"
        - name: DATABASE_NAME
          value: "{{ .Values.env.DATABASE_NAME }}"
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.env.DATABASE_USER.valueFrom.secretKeyRef.name }}"
              key: "{{ .Values.env.DATABASE_USER.valueFrom.secretKeyRef.key }}"
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.env.DATABASE_PASSWORD.valueFrom.secretKeyRef.name }}"
              key: "{{ .Values.env.DATABASE_PASSWORD.valueFrom.secretKeyRef.key }}"
          value: {{ .Values.env.postgres_URL | quote }}
      imagePullSecrets:
        {{ toYaml .Values.imagePullSecrets | nindent 8 }}
      securityContext:
        {{ toYaml .Values.securityContext | nindent 8 }}